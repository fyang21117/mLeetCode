/*
* 20191127
* 递归代码模板：
*
*/
public void recur(int level, int param){

	//terminator
	//process result
	    if(level > MAX_LEVEL){
	    	return;
	    }
	
	//process current logic
	process(level, param);
	
	//drill down
	recur( level : level + 1, new Param);

	//restore current status
}




/*
* 20191127
* 分治代码模板：
*
*/
def divide_conquer(problem, param1, param2, ...):
	#recursion terminator
	if problem is None:
	  print_result
	  return

	#prepare data
	data = prepare_data(problem)
	subproblems = split_problem(problem, data)

	#conquer subproblems
	subresult1 = self.divide_conquer(subproblems[0], p1, ...)
	subresult2 = self.divide_conquer(subproblems[1], p1, ...)
	subresult3 = self.divide_conquer(subproblems[2], p1, ...)
	...

	#process and generate the final result
	result = process_result(subresult1, subresult2, subresult3, ...)

	#revert the current level states



/*
* 20191127
* DFS代码模板：
*
*/
(1)递归写法：
visited = set()

def dfs(node, visited):

    #terminator
    #already visited
    if node in visited:
	return

    visited.add(node)

    #process current node here...
	for next_node in node.children():
	    if not next_node in visited:
		dfs(next_node, visited)

(2)非递归写法：
def DFS(self,tree):

    if tree.root is None:
	return []

    visited, stack = [],[tree.root]

    while stack:
	node = stack.pop()
	visited.add(node)

	process(node)
	node = generate_related_nodes(node)
	stack.push(nodes)

	#other processing work


/*
* 20191127
* BFS代码模板：
*
*/
def BFS(graph, start, end)
	queue = []
	queue.append([start])

	while queue:
	    node = queue.pop()
	    visited.add(node)
	
	    process(node)
	    nodes = generate_related_nodes(node)
	    queue.push(nodes)

	#other processing work


/*
* 20191127
* 二分查找代码模板：
*
*/

left, right = 0, len(array)-1

while left <=right :
	mid = (left +right)/2

	#find the target
	if array[mid] == target:
	    break or return result

	elif array[mid] < target:
		left = mid + 1
	else:
		right = mid - 1
		

/*
* 20191127
* A*代码模板：
* 高级搜索
*/

def AstarSearch(graph, start, end):

    #优先级 -> 估价函数
    pq = collections.priority_queue()
    pq.append([start])
    visited.add(start)

    while pq:
	node = pq.pop()	#can add more intelligence here?
	visited.add(node)
	
	process(node)
	nodes = generate_related_nodes(node)
	unvisited = [node for node in nodes if node not in visited]
	pq.push(unvisited)


/**
 * //二叉树遍历
 * //前序遍历：根左右。中序：左根右。后序：左右根
 * //Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(final TreeNode root) {
        final List<Integer>res = new ArrayList<>();
        helper(root,res);
        return res;
    }
    public void helper(final TreeNode root,final List<Integer>res){
        if(root != null){
            res.add(root.val);
            if(root.left != null){
                helper(root.left,res);
            }
            if(root.right != null){
                helper(root.right,res);
            }
        }
    }
}

/*
* 20191127
* 位运算比取模等运算更快
*/
【判断奇偶】
ｘ％２＝＝１　－＞　（ｘ＆１）＝＝１
ｘ％２＝＝０　－＞　（ｘ＆１）＝＝０

【除以２】
ｘ／２　－＞　ｘ＞＞１
ｍｉｄ＝（Ｌ＋Ｒ）／２　－＞ｍｉｄ＝（Ｌ＋Ｒ）＞＞１

【清零最低位的１】
ｘ＝ｘ＆（ｘ－１）

【得到最低位的１。其中-X: 取反加一】
ｘ＆－ｘ		＝＞最低位的１
（ｘ＆～ｘ）	＝＞０




/*
* 20191128
* 初级排序--O(n^2)
*/

1.选择排序（Selection Sort）
  每次找最小值，然后放到待排序数组的起始位置。

代码模板：
public int[] selectionSort(final int []arr){
	final int len = arr.length;
	int minIndex,temp;
	for(int i=0;i<len-1;i++){
	   minIndex = i;
	   for(int j=i+1;j<len;j++){
		if(arr[j] < arr[minIndex])
			minIndex = j;
	   }
	   temp = arr[i];
	   arr[i] = arr[minIndex];
	   arr[minIndex] = temp;
	}
	return arr;
}



2.插入排序（Insertion Sort）
  从前到后逐步构建有序序列；对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。

代码模板：
public int[] insertionSort(final int []arr){
	final int len = arr.length;
	int preIndex , current;
	for(int i=1;i<len;i++){
	   preIndex = i-1;
	   current = arr[i];
	   while(preIndex >=0 && arr[preIndex]>current){
	   	arr[preIndex + 1] = arr[preIndex];
		preIndex --;
	   }
	arr[preIndex+1] = current;
	}
	return arr;
}


3.冒泡排序（Bubble Sort）
  嵌套循环，每次查看相邻的元素如果逆序，则交换。

代码模板：
public int[] bubbleSort(final int []arr){
	final int len = arr.length;
	int temp;
	for(int i=0;i<len-1;i++){
	   for(int j=i+1;j<len;j++){
		if(arr[i] > arr[j]){
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp;
		}
	   }
	}
	return arr;
}


/*
* 20191128
* 高级排序--O(nlogn)
*/

1.快速排序（Quick Sort）
数组取标杆pivot，将小元素放pivot左边，大元素放pivot右边，然后依次对左边和右边的子数组继续快排，以达到整个序列有序。

代码模板：
public static void quickSort(final int []array,final int begin,final int end){
	if(end <= begin) return;
	final int pivot = partition(array,begin,end);
	quickSort(array,begin,pivot-1);
	quickSort(array,pivot+1,end);
}
static int partition(final int []a,final int begin,final int end){
	//pivot:标杆位置
	//counter：小于pivot的元素个数
	final int pivot = end;
	int counter = begin;
	for(int i=begin;i<end;i++){
	   if(a[i]<a[pivot]){
		final int temp = a[counter];
		a[counter] = a[i];
		a[i] = temp;
		counter++;
	   }
	}
	final int temp = a[pivot];
	a[piviot] = a[i];
	a[i] = temp;
	return counter;
}


2.归并排序（Merge Sort）--分治思想
(1)把长度为n的输入序列分成两个长度为n/2的子序列；
（2）对这两个子序列分别采用归并排序；
（3）将两个排序好的子序列合并成一个最终的排序序列。

代码模板：
public static void mergeSort(final int []array,final int left,final int right){
	if(right <= left) return;
	final int mid = (left + right)>>1;//(left+right)/2
	mergeSort(array,left,mid);
	mergeSort(array,mid+1,right);
	merge(array,left,mid,right);
}
public static void merge(final int []array,final int left,final int mid,final int right){
   //中间数组
   final int []temp = new int[right - left +1];
   int i =left,j =mid+1,k=0;

   while(i<=mid && j<=right){
	temp[k++] = arr[i]<=arr[j] ? arr[i++]:arr[j++];
   }
   while(i<=mid) temp[k++]=arr[i++];
   while(j<=right) temp[k++]=arr[j++];

   for(int p=0;p<temp.length;p++)
	arr[left+p] = temp[p];
   //System.arraycopy(a,start1,b,start2,length);
}

比较：
归并和快排具有相似性，但步骤顺序相反。
归并：先排序左右子数组，然后合并两个有序子数组。
快排：先调配出左右子数组，然后对于左右子数组进行排序。



/*
* 20191129
* 特殊排序--O(n)
*/

1.计数排序（Conuting Sort）
计数排序要求输入的数据必须是有确定范围的整数。将输入的数据值转化为键值存储在额外开辟的数组空间中；然后依次把计数大于1的填充回原数组。


2.桶排序（Bucket Sort）
桶排序的工作原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（可能使用别的排序算法或以递归方式）。


3.基数排序（Radix Sort）
基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；以此类推，直到最高位。（有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序）。





/*
* 20191206
* 高级字符串操作--最长子串、子序列
*/
1.Longest common sequence（最长子序列）
(1)DP方程:
if(s1[i-1]==s2[j-1])
	dp[i][j]=dp[i-1][j-1]+1;
else
	dp[i][j]=max(dp[i-1][j],dp[i][j-1]);

2.Longest common substring(最长子串)
(1)DP方程:
if(s1[i-1]==s2[j-1])
	dp[i][j]=dp[i-1][j-1]+1;
else
	dp[i][j]=0;

3.Edit distance(编辑距离)

/*
* 20191207
* Rabin-Karp算法
*/
算法思想：
1.假设子串的长度为M（pat），目标字符串的长度为N（txt）
2.计算子串的hash值hash_pat
3.计算目标字符串txt中每个长度为M的子串的hash值（共需要计算N-M+1次）
4.比较hash值：如果不同必然不匹配；如果相同再使用朴素算法判断



第八周学习总结
高级动态规划
动态规划
本质上还是寻找重复性（计算机指令集）
分治的过程中能够在中间每一步淘汰次优解就变成了动态规划
将一个复杂问题分解成各个简单的子问题（分治思想）
有一个最优子结构
很多时候状态本身可以进行顺推（从下到上往上推）动态递推
DP 顺推模板
function DP():
    dp = [][] # 0. dp 状态的定义 一维情况、二维情况、三维情况

    # 1.本身是一个嵌套循环
    for i = 0 .. M {
        for j = 0 .. N {
            dp[i][j] = _Function(dp[i'][j']...) # 2.从之前的 dp 的状态，推到最新的 dp[i][j] 的状态
        }
    }
    return dp[M][N] # 3. dp[M][N] 反映最后的最终结果
0. dp 状态的定义 需要把现实的问题定义成一个数组，里面保存状态
2. 状态转移方程 类似 Fibonacci 数列 dp[i] = dp[i - 1] + dp[i - 2]，更多情况下是求最小值、累加累减或者是有一层小的循环从之前的 k 个状态中找出它的最值
动态规划的状态转移方程
爬楼梯问题
本质上可以转换成 Fibonacci 问题
和硬币置换问题异曲同工（一次上一步上两步相当于每次用1面值2面值的硬币）
递归公式 f(n) = f(n - 1) + f(n - 2), f(0) = 0, f(1) = 1
不同路径
递归公式 f(x, y) = f(x - 1, y) + f(x, y - 1)
打家劫舍
不能偷连续的两个房子
dp[i] 的状态表示打劫从 A[0] 到 A[i] 的房子最多可以获得多少钱 max $ of robbing A[0 -> i]
i 有可能被打劫，也可能没被打劫
dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])
dp[i][0] 的状态表示打劫从 A[0] 到 A[i] 的房子最多可以获得多少钱，并且没打劫 num[i]
dp[i][1] 的状态表示打劫从 A[0] 到 A[i] 的房子最多可以获得多少钱，并且打劫了 num[i]
dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])
dp[i][1] = dp[i - 1][0] + nums[i]
最小路径和
dp[i][j] 的状态表示：minPath(A[i -> i][1 -> j])
dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + A[i][j]
股票买卖
一个方法团灭6道股票问题
dp[i][k][0 or 1] (i >= 0 && i <= n - 1, k >= 1 && k <= K)
i 为天数
k 为最多交易次数
[0, 1] 为是否持有股票
总状态数：n * K * 2 种
for 0 <= i < n :
    for 1 <= k <= K :
        for s in {0, 1} :
            dp[i][k][s] = max(buy, sell, rest)
状态转移方程
dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i])
max(选择 rest, 选择 sell)
今天我没持有股票，有两种可能：
我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有股票
我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了
dp[i][k][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i])
max(选择 rest, 选择 buy)
今天我持有着股票，有两种可能：
我昨天就持有着股票，然后今天选择 rest， 所以我今天还持有着股票
我昨天本没有持有股票，但今天我选择 buy，所以今天我就持有股票了
动态规划进阶
复杂度来源
状态拥有更多维度（二维、三维或者更多，甚至需要压缩）
状态方程更加复杂
本质上是内功、逻辑思维能力、数学能力
字符串
Java 中字符串 String 是不可变的
Java 中的 x == y 比较的是指向的内存地址，用 x.equals(y) 方法比较 x 和 y 的值是否相同，可以用 x.equalsIgnoreCase(y) 忽略大小写比较
字符串匹配算法
暴力法 (brute force)
挨个比较所有的字符才知道目标字符串中是否包含子串
public static int forceSearch(String txt, String pat) {
    int M = txt.length();
    int N = pat.length();
    for (int i = 0; i <= M - N; i++) {
        int j;
        for (j = 0; j < N; j++) {
            if (txt.charAt(i + j) != pat.charAt(j)) {
                break;
            }
        }
        if (j == N) {
            return i;
        }
        // 更加聪明？
        // 1. 预先判断子串是否相同 hash(txt.subString(i, M)) == hash(pat)
        // 2. KMP 已经匹配的片段的最大前缀和最大后缀的长度
    }
    return -1;
}
Rabin-Karp 算法
为了避免挨个字符对目标字符串和子串进行比较，我们可以尝试一次性判断两者是否相等
需要通过一个哈希函数算出子串的哈希值，然后将它和目标字符串中的子串的哈希值进行比较
思想：
假设子串 pat 的长度为 M，目标字符串 txt 的长度为 N
计算子串的 hash 值 hash_pat
计算目标字符串 txt 中每个长度为 M 的子串的 hash 值，共需要计算 N - M + 1 次
比较 hash 值：如果 hash 值不同，字符串必然不匹配；如果 hash 值相同，还需要使用朴素算法再次判断
public final static int D = 256; // 每一位权重就是256的相应的次方
public final static int Q = 9997; // 防止 hash 值过大，每次 % 一个素数
static int RabinKarpSearch(String txt, String pat) {
    int M = pat.length();
    int N = txt.length();
    int i, j;
    int patHash = 0, txtHash = 0;

    for (i = 0; i < M; i++) {
        patHash = (D * patHash + pat.charAt(i)) % Q;
        txtHash = (D * txtHash + txt.charAt(i)) % Q;
    }
    int highestPow = 1; // pow(256, M - 1)
    for (i = 0; i < M - 1; i++)
        highestPow - (highestPow * D) % Q;

    for (i = 0; i <= N - M; i++) { //枚举起点
        if (patHash == txtHash) {
            for (j = 0; j < M; j++) {
                if (txt.charAt(i + j) != pat.charAt(j))
                    break;
            }
            if (j == M)
                return i;
        }
        if (i < N - M) {
            txtHash = (D * (txtHash - txt.charAt(i) * highestPow) + txt.charAt(i + M)) % Q;
            if (txtHash < 0)
                txtHash += Q;
        }
    }
    return -1;
}
KMP 算法
Knuth-Morris-Pratt 的思想就是，当子串与目标字符串不匹配时，其实你已经知道了前面已经匹配成功那一部分的字符（包括子串与目标字符串）
利用这个已知信息，不要把搜索位置移回已经比较过的位置，而是继续把它向后移，这样就提高了效率
KMP 字符串匹配算法
字符串匹配的 KMP 算法








经典习题：
（1）爬楼梯、硬币兑换
（2）括号匹配、括号生成、直方图最大面积、滑动窗口
（3）二叉树遍历、分层输出树、判断二叉排序树
（4）股票买卖、偷房子、字符串编辑距离、最长上升子序列、最长公共子序列
（5）异位词（判断和归类）、回文串（最大回文串）、Regex和通配符匹配
（6）高级数据结构（Trie、BloomFilter、LRU cache、etc）













